export interface Postable<T> {
    post(data: T): void;
}
export declare type AttachParams<T> = {
    matcher(data: T): boolean;
    boundTo: Object;
    handler(data: T): any;
};
export declare class SyncEvent<T> {
    static readonly stopPropagation: {};
    private static readonly defaultEvtMatcher;
    postCount: number;
    readonly evtAttach: SyncEvent<"attach" | "attachPrepend" | "attachOnce" | "attachOncePrepend" | "waitFor" | "attachExtract" | "attachOnceExtract" | "waitForExtract">;
    private readonly callbackHandlers;
    private readonly promiseHandlers;
    stopWaiting(): void;
    readonly handlerCount: number;
    readonly waiterCount: number;
    readonly permanentHandlerCount: number;
    readonly onceHandlerCount: number;
    constructor();
    createProxy<Q extends T>(matcher: (data: T) => data is Q): SyncEvent<Q>;
    createProxy(matcher?: (data: T) => boolean): SyncEvent<T>;
    createProxyExtract<Q extends T>(matcher: (data: T) => data is Q): SyncEvent<Q>;
    createProxyExtract(matcher?: (data: T) => boolean): SyncEvent<T>;
    private __createProxy__(matcher, extract);
    waitFor<Q extends T>(matcher: (data: T) => data is Q, timeout?: number): Promise<Q>;
    waitFor(timeout?: number): Promise<T>;
    waitFor(matcher: (data: T) => boolean, timeout?: number): Promise<T>;
    waitForExtract<Q extends T>(matcher: (data: T) => data is Q, timeout?: number): Promise<Q>;
    waitForExtract(timeout?: number): Promise<T>;
    waitForExtract(matcher: (data: T) => boolean, timeout?: number): Promise<T>;
    private readWaitForParams(inputs);
    private __waitFor__(inputs, extract);
    attachOnce<Q extends T>(matcher: (data: T) => data is Q, handler: (data: Q) => any): this;
    attachOnce<Q extends T>(matcher: (data: T) => data is Q, boundTo: Object, handler: (data: Q) => any): this;
    attachOnce<Q extends T>(matcher: (data: T) => data is Q, event: Postable<Q>): this;
    attachOnce(event: Postable<T>): this;
    attachOnce(handler: (data: T) => any): this;
    attachOnce(matcher: (data: T) => boolean, event: Postable<T>): this;
    attachOnce(matcher: (data: T) => boolean, handler: (data: T) => any): this;
    attachOnce(boundTo: Object, handler: (data: T) => any): this;
    attachOnce(matcher: (data: T) => boolean, boundTo: Object, handler: (data: T) => any): this;
    attachOncePrepend<Q extends T>(matcher: (data: T) => data is Q, handler: (data: Q) => any): this;
    attachOncePrepend<Q extends T>(matcher: (data: T) => data is Q, boundTo: Object, handler: (data: Q) => any): this;
    attachOncePrepend<Q extends T>(matcher: (data: T) => data is Q, event: Postable<Q>): this;
    attachOncePrepend(event: Postable<T>): this;
    attachOncePrepend(handler: (data: T) => any): this;
    attachOncePrepend(matcher: (data: T) => boolean, event: Postable<T>): this;
    attachOncePrepend(matcher: (data: T) => boolean, handler: (data: T) => any): this;
    attachOncePrepend(boundTo: Object, handler: (data: T) => any): this;
    attachOncePrepend(matcher: (data: T) => boolean, boundTo: Object, handler: (data: T) => any): this;
    attachOnceExtract<Q extends T>(matcher: (data: T) => data is Q, handler: (data: Q) => void): this;
    attachOnceExtract<Q extends T>(matcher: (data: T) => data is Q, boundTo: Object, handler: (data: Q) => void): this;
    attachOnceExtract<Q extends T>(matcher: (data: T) => data is Q, event: Postable<Q>): this;
    attachOnceExtract(event: Postable<T>): this;
    attachOnceExtract(handler: (data: T) => void): this;
    attachOnceExtract(matcher: (data: T) => boolean, event: Postable<T>): this;
    attachOnceExtract(matcher: (data: T) => boolean, handler: (data: T) => void): this;
    attachOnceExtract(boundTo: Object, handler: (data: T) => void): this;
    attachOnceExtract(matcher: (data: T) => boolean, boundTo: Object, handler: (data: T) => void): this;
    attach<Q extends T>(matcher: (data: T) => data is Q, handler: (data: Q) => any): this;
    attach<Q extends T>(matcher: (data: T) => data is Q, boundTo: Object, handler: (data: Q) => any): this;
    attach<Q extends T>(matcher: (data: T) => data is Q, event: Postable<Q>): this;
    attach(event: Postable<T>): this;
    attach(handler: (data: T) => any): this;
    attach(matcher: (data: T) => boolean, event: Postable<T>): this;
    attach(matcher: (data: T) => boolean, handler: (data: T) => any): this;
    attach(boundTo: Object, handler: (data: T) => any): this;
    attach(matcher: (data: T) => boolean, boundTo: Object, handler: (data: T) => any): this;
    attachPrepend<Q extends T>(matcher: (data: T) => data is Q, handler: (data: Q) => any): this;
    attachPrepend<Q extends T>(matcher: (data: T) => data is Q, boundTo: Object, handler: (data: Q) => any): this;
    attachPrepend<Q extends T>(matcher: (data: T) => data is Q, event: Postable<Q>): this;
    attachPrepend(event: Postable<T>): this;
    attachPrepend(handler: (data: T) => any): this;
    attachPrepend(matcher: (data: T) => boolean, event: Postable<T>): this;
    attachPrepend(matcher: (data: T) => boolean, handler: (data: T) => any): this;
    attachPrepend(boundTo: Object, handler: (data: T) => any): this;
    attachPrepend(matcher: (data: T) => boolean, boundTo: Object, handler: (data: T) => any): this;
    attachExtract<Q extends T>(matcher: (data: T) => data is Q, handler: (data: Q) => void): this;
    attachExtract<Q extends T>(matcher: (data: T) => data is Q, boundTo: Object, handler: (data: Q) => void): this;
    attachExtract<Q extends T>(matcher: (data: T) => data is Q, event: Postable<Q>): this;
    attachExtract(event: Postable<T>): this;
    attachExtract(handler: (data: T) => void): this;
    attachExtract(matcher: (data: T) => boolean, event: Postable<T>): this;
    attachExtract(matcher: (data: T) => boolean, handler: (data: T) => void): this;
    attachExtract(boundTo: Object, handler: (data: T) => void): this;
    attachExtract(matcher: (data: T) => boolean, boundTo: Object, handler: (data: T) => void): this;
    private readAttachParams(inputs);
    private __attach__(inputs, once, extract, prepend);
    private readDetachParams(inputs);
    detach(): this;
    detach(event: Postable<T>): this;
    detach(by: Partial<AttachParams<T>>): this;
    detach(boundTo: Object): this;
    detach(handler: (data: T) => void): this;
    detach(boundTo: Object, handler: (data: T) => void): this;
    post(data: T): this;
    private postPromise;
    private postCallback(data);
}
export declare class VoidSyncEvent extends SyncEvent<void> {
    post(): this;
}
