import { Evt } from "../Evt";
import { EventTargetLike } from "../types/EventTargetLike";
declare type Ctx = import("../Ctx").Ctx;
declare type OneOrMany<T> = T | ArrayLike<T>;
export declare function from<K extends keyof DocumentEventMap>(ctx: Ctx, target: Document, eventName: K, options?: EventTargetLike.HasEventTargetAddRemove.Options): Evt<DocumentEventMap[K]>;
export declare function from<T>(ctx: Ctx, target: OneOrMany<EventTargetLike.NodeStyleEventEmitter | EventTargetLike.JQueryStyleEventEmitter>, eventName: string): Evt<T>;
export declare function from<T>(ctx: Ctx, target: OneOrMany<EventTargetLike.HasEventTargetAddRemove<T>>, eventName: string, options?: EventTargetLike.HasEventTargetAddRemove.Options): Evt<T>;
export declare function from<T>(ctx: Ctx, target: OneOrMany<EventTargetLike.RxJSSubject<T>>): Evt<T>;
export declare function from<K extends keyof DocumentEventMap>(target: Document, eventName: K, options?: EventTargetLike.HasEventTargetAddRemove.Options): Evt<DocumentEventMap[K]>;
export declare function from<T>(target: OneOrMany<EventTargetLike.NodeStyleEventEmitter | EventTargetLike.JQueryStyleEventEmitter>, eventName: string): Evt<T>;
export declare function from<T>(target: OneOrMany<EventTargetLike.HasEventTargetAddRemove<T>>, eventName: string, options?: EventTargetLike.HasEventTargetAddRemove.Options): Evt<T>;
export declare function from<T>(target: OneOrMany<EventTargetLike.RxJSSubject<T>>): Evt<T>;
export {};
